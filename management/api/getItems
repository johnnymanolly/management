/**
 * Gets data for the grid.
 * 
 *  @param columnName
 *  @param resultsPerPage
 *  @param pageNumber
 *  @param sort
 *  @param sortType
 *  @param queryFilter
 *  @param queryType
 *  @param sortingColumnName
 *  @param filterColumnName
 *  @param action
 * 
 * @return On success: { "status" : "success" }
 *         On failure: { "status" : "failure", "errorDetail" : "[error message]" }
 */

var log = require("log");
log.setLevel("INFO");
var documents = require("document");

function capitalizeFirstLetter(string) {
    return string.charAt(0).toUpperCase() + string.slice(1);
}

/* create dummy data
for(var i = 1; i <= 100; i++){
  var fields = {};
  fields["formType"] = "car";
  fields["name"] = "name_"+i;
  fields["model"] = "model_"+i;
  fields["price"] = "price_"+i;
  documents.save(fields);
}
return
*/
var params = {};
if(request.body != null){
    params = request.body;
}else if(request.parameters.body){
    params = request.parameters.body;
} else {
    params = request.parameters;
}
if(typeof params == 'string' && params != null){
    try{
        params = JSON.parse(params);   
    }catch(e){
        return "INVALID OR MISSING PARAMETER";
    }
}

log.info("params : "+JSON.stringify(params));


var columnName = params.columnName;
var resultsPerPage = params.resultsPerPage;
var pageNumber = params.pageNumber;
var sort = params.sort;
var sortType = params.sortType;
var queryFilter = params.queryFilter;
var queryType = params.queryType;
var sortingColumnName = params.sortingColumnName;
var filterColumnName = params.filterColumnName;
var action = params.action;
var catKey = params.catKey;
var subCategory = params.subCategory;
var category = params.category;
var sortingFilter = params.sortingFilter;
var publishStatus = params.publishStatus;
var promotion = params.promotion;

var fromValue = params.fromValue;
var toValue = params.toValue;

var results;

if(action){
   
    if(action == "import"){
        var rows = params.rows;  
        
        for(var x = 0; x < rows.length; x++)
        {
            rows[x]["formType"] = "item"; 
            rows[x]["meta.types"] = {
                "price": "numeric",
                "priceOffer": "numeric"
            } 
            rows[x]["outOfStock"] = "false";   
            var fieldsToSaveResult = documents.save(rows[x]);
        }      
        if(fieldsToSaveResult.metadata.status == "failure") {
            return fieldsToSaveResult.metadata;
        }else{
          
            var message = {"result": "success", "id" : "item-grid"};
            publish("responseChannel", message);
            return  {status : "success"}
        }
    }
    else if(action == "add"){
        var fieldsToSave = params.row;  

        fieldsToSave["formType"] = "item"; 
        fieldsToSave["meta.types"] = {
            "price": "numeric",
            "priceOffer": "numeric"
        } 
        fieldsToSave["publish"] = "Unpublished"; 
        fieldsToSave["outOfStock"] = "false";     
        
        var fieldsToSaveResult = documents.save(fieldsToSave);
        if(fieldsToSaveResult.metadata.status == "failure") {
            return fieldsToSaveResult.metadata;
        }else{
            var message = {"result": "success", "id" : "item-grid"};
            publish("responseChannel", message);
            return  {status : "success"}
        }
    }else if(action == "edit"){
        var fieldsToSave = params.row;  

        fieldsToSave["formType"] = "item"; 
        fieldsToSave["meta.types"] = {
            "price": "numeric",
            "priceOffer": "numeric"
        } 
        
        if(fieldsToSave["subCategory"])
        {
			var getGalleryresult = getGalleryName(fieldsToSave["subCategory"]);
            if(getGalleryresult.metadata.status == "failure") {
                return getGalleryresult.metadata;
            }else{
                
                if(getGalleryresult.result.documents.length == 0)
                {
                    return {metadata : {status : "failure"}}
                }
                fieldsToSave["category"] = getGalleryresult.result.documents[0]["category"]; 
            }
        }
        
        log.info("Edited Fields : " +JSON.stringify(fieldsToSave))  
        var fieldsToSaveResult = documents.save(fieldsToSave);
        if(fieldsToSaveResult.metadata.status == "failure") {
            return fieldsToSaveResult.metadata;
        }else{
            fieldsToSave["key"] = fieldsToSave.key;
            var message = {"result": "success", "id" : "item-grid"};
            publish("responseChannel", message);
            return  {status : "success"}
        }
    }else if(action == "delete"){
        if(params.keys){
            var keys = params.keys;
            for(var i = 0; i < keys.length; i++){
                documents.delete(keys[i]);
            }
        } 
        var message = {"result": "success", "id" : "item-grid"};
        publish("responseChannel", message);
        return  {status : "success"}
    }
}else{
    var queryParams = {};
    if(sortType == null) sortType = "string"
    var fieldsParams = "attachments, brand, category, description, image, key, name, price, priceOffer, unit, subCategory, publish, promotion";
    var queryString = 'formType = "item"';
    if(publishStatus){
        queryString += ' and publish = "' + publishStatus + '"';
    }
    if(subCategory){
        if(typeof subCategory == "string"){
             queryString += ' and subCategory="'+subCategory+'"';
        }else{
            for(var i = 0; i < subCategory.length; i++){
                if(i == 0){
                    queryString += ' and ( subCategory="'+subCategory[i]+'"';
                }else{
                    queryString += ' or subCategory="'+subCategory[i]+'"';
                }        
            }
            queryString += ' )';
        }
    }
    if(category){
        queryString += ' and category="'+category+'"';
    }
    if(catKey){
        queryString += ' and catKey="'+catKey+'"';
    }
    if(promotion){
        queryString += ' and promotion= "true"';
    }
    var sortString = (sortingColumnName && sortingColumnName != "" && sortingColumnName != "undefined") ? sortingColumnName+"<"+sortType+":"+sort+">" : null;
    if(sortingFilter){
        sortString = sortingFilter;
    }

    queryParams["count"] = "true";
    queryParams["query"] =  queryString;
    queryParams["fields"] =  fieldsParams;

    if(queryFilter){
        var filterQuery = (filterColumnName == null)? " and (name like \"" +queryFilter+ "%\" or name like \"" +queryFilter.toLocaleLowerCase()+ "%\" or name like \"" +capitalizeFirstLetter(queryFilter) + "%\" or category like \"" +queryFilter+ "%\" or price like \"" +queryFilter+ "%\" or image like \"" +queryFilter+ "%\")" : "and ("+filterColumnName+"<"+sortType+">" + " like \"" +queryFilter+ "%\")";
        queryParams["query"] += filterQuery;
    }
    
    if(fromValue){
        queryParams["query"] += " and price<numeric> > " +fromValue;
    }
    
    if(toValue){
        queryParams["query"] += " and price<numeric> < " +toValue;
    }

    if(sortString){
        queryParams["sort"] = sortString;
    }
    
    if(resultsPerPage){
        queryParams["resultsPerPage"] = resultsPerPage;
    }
    
    if(pageNumber){
        queryParams["pageNumber"] = pageNumber;
    }
    
    log.info(JSON.stringify(queryParams))
    results = documents.query(queryParams);

    return results.result
}

function getGalleryName(subCat)
{
    queryParams = {};
    queryParams["query"] = 'formType = "categories" and subCategory = "' + subCat + '"';
    queryParams["fields"] =  "category";
    var results = documents.query(queryParams);
    
    return results
}









