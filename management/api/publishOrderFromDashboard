var documents = require("document");
var dateFormatter = require("/modules/momentjs/moment.min.js");

var log = require("log");
log.setLevel("INFO");

var params = {};

if(request.body != null){
	params = request.body;
}else if(request.parameters.body){
	params = request.parameters.body;
} else {
  params = request.parameters;
}
if(typeof params == 'string' && params != null){
  	try{
    	params = JSON.parse(params);   
    }catch(e){
      	return "INVALID OR MISSING PARAMETER";
    }
}

var order = {};
for(obj in params){
  order[obj] = params[obj]
}

order["items"] = JSON.stringify(order["items"]);

order["formType"] = "onlineOrder";
order["orderStatus"] = "Unassigned";
order["delivered"] = "Not delivered";
var date = new Date();

var orderDate = dateFormatter.moment(date.getTime()).add(3,'h').format("YYYY-MM-DDTHH:mm:ssZZ");
order["orderDate"] = orderDate;

order["meta.types"] = {
        "items" : "text",
        "total" : "numeric",
        "orderDate": "date"
      }


var registered = false;
var number = order["number"];
var user = apsdb.callApi("GetUser", {login: number}, null);
if(user.metadata.status == "success" && user.result.user.login){
    registered = true;
}else{
    registered = false;
}

if(!registered){
    var queryParams = {};
    var fieldsParams = "*";
    var queryString = 'formType = "client" and number = "' + number + '"';

    queryParams["query"] =  queryString;
    queryParams["fields"] =  fieldsParams; 
    var result = documents.query(queryParams);
    if(result.result.documents.length > 0) {
      registered = true;
    }
}
order["client"] = (registered) ? "Previous Client" : "New Client";
/*
params = {

         name: "johnny Manolly",
  	     address: "Beit koko",
         number: number,
         client: (registered) ? "Previous Client" : "New Client",
         location : "48.8980,2.2951",
         total: 50000,
		 items : [{
                    "name": "Mozzarella Chicken Burger",
                    "price": "10000 LL",
                    "image": "salami.jpg",
                    "itemDocKey": "C5789AB7362EE015B66F4188127FE7EE",
                    "barcode": "barcode.png",
                    "barcodeID": "4597741305",
                    "pos": 2,
                    "category": "food",
                    "comments": "",
                    "quantity": 2,
                    "total": 20000
                },
                {
                    "name": "Chicken Breast Burger",
                    "price": "8000 LL",
                    "itemDocKey": "193B624BB24E90729845F0EC3D06252F",
                    "image": "Mortadelle Olives.jpg",
                    "barcode": "barcode.png",
                    "barcodeID": "",
                    "pos": 0,
                    "comments": "",
                    "category": "food",
                    "quantity": 3,
                    "total": 24000
                },
                {
                    "name": "Mexican Chicken Burger",
                    "price": "10000 LL",
                    "itemDocKey": "19561C3F7D536ED546EA010E57E9C707",
                    "image": "Mortadelle Dinde.jpg",
                    "barcodeID": "",
                    "barcode": "barcode.png",
                    "pos": 3,
                    "comments": "extra spicy",
                    "category": "food",
                    "quantity": 3,
                    "total": 30000
                }]
}    
*/

log.info(JSON.stringify(order))
var saveResult = documents.save(order);
log.info(JSON.stringify(saveResult))
order["key"] = saveResult.result.document.key;
var message = {"result": {result : [order], action: "add"}, "id" : "orders-grid"};
publish("responseChannel", message);
return {status: "success"}



