var log = require("log");
log.setLevel("INFO");
var documents = require("document");
var params = {};

if(request.body != null)
{
	params = request.body;
}
else if(request.parameters.body)
{
	params = request.parameters.body;
}
else
{
  params = request.parameters;
}
if(typeof params == 'string' && params != null)
{
  	try
    {
    	params = JSON.parse(params);   
    }
    catch(e)
    {
      	return "INVALID OR MISSING PARAMETER";
    }
}

var startDate = params.startDate;
var endDate = params.endDate;
var location = params.location;

if(startDate == null || typeof startDate == 'undefined')
{
  startDate =  new Date();
  startDate.setHours(0);
  startDate.setMinutes(0);
  startDate.setSeconds(0);
  startDate = formatDate(startDate)
}
/*
if(endDate == null || typeof endDate == 'undefined'){
  endDate = formatDate(new Date())
}
*/
//return startDate + "    " + endDate
var key = params.key;
var columnName = params.columnName;
var resultsPerPage = params.resultsPerPage;
var pageNumber = params.pageNumber;
var sort = params.sort;
var sortType = params.sortType;
var queryFilter = params.queryFilter;
var queryType = params.queryType;
var sortingColumnName = params.sortingColumnName;
var filterColumnName = params.filterColumnName;
var action = params.action;
var deliveryFilter = params.deliveryFilter;
var number = params.number;

var results;

if(params.action){
    delete params.action
}

if(action)
{
  if(action == "add")
  {
      
  }
  else if(action == "edit")
  {
      var queryParams = {};
      queryParams["query"] =  'key = "'+ key +'"';
      queryParams["fields"] = "*";
      var orderQueryResults = documents.query(queryParams);
      if(orderQueryResults.metadata.status == "failure")
      {
          return {status : "failure", errorDetails : "an error has occured when quering order document: " + key, errorMsg: orderQueryResults};
      } 
      
      var updateParams = JSON.parse(JSON.stringify(params.row));
      updateParams["update"] = "true";
      updateParams["formType"] = "onlineOrder";
      updateParams["meta.types"] = {
          "orderDate" : "date",
          "deliveryDate": "date",
          "total" : "numeric",
          "items" : "text"
      }
      var fieldsToSave = updateParams;
      var fieldsToSaveResult = documents.save(fieldsToSave);
      if(fieldsToSaveResult.metadata.status == "failure")
      {
          return fieldsToSaveResult.metadata;
      }
      else
      {
          var message = {"result": "success", "id" : "orders-grid"};
          publish("responseChannel", message);
          return  {status :"success"}
      }
  }
  else if(action == "delete")
  {
      
  }
}
else
{
    var queryParams = {};
    if(sortType == null) sortType = "string"
    var fieldsParams = "name, address, number, client, fullName, orderedBy, orderedDate, deliveryDate, orderType ,cancelled, assignee, orderStatus, delivered, location, scheduled, total, deliveredBy, formType, additionalInformation, orderId";
    var queryString = 'formType = "onlineOrder"';
    if(number)
    {
        queryString += ' and number= "' + number + '"';
    }
    var sortString = (sortingColumnName && sortingColumnName != "" && sortingColumnName != "undefined") ? sortingColumnName+"<"+sortType+":"+sort+">" : null;
    
    queryParams["count"] = "true";
    queryParams["query"] =  queryString;
    queryParams["fields"] =  fieldsParams;

    
    
   
    if(queryFilter && queryFilter == 'notConfirmed')
    {
      var filterQuery = ' and (orderStatus != "Confirmed" and orderStatus != "Delivered")';
      queryParams["query"] += filterQuery;
    }
    else if(queryFilter && queryFilter != 'all')
    {
      var filterQuery = " and (orderId like \"" +queryFilter+ "%\" or fullName like \"" +queryFilter+ "%\" or address like \"" +queryFilter+ "%\" or number like \"" +queryFilter+ "%\" or orderStatus like \"" +queryFilter+ "%\" or delivered like \"" +queryFilter+ "%\")";
      queryParams["query"] += filterQuery;
    }
   
    
    if(deliveryFilter)
    {
        queryParams["query"] += ' and deliveredBy like "' + deliveryFilter + '%\"';
    }
    
    if(!queryFilter)
    {
        queryParams["query"] += ' and deliveryDate<date> > "' + startDate + '"';
        if(endDate != null && typeof endDate != 'undefined')
        {
            queryParams["query"] += ' and deliveryDate<date> <= "' + endDate + '"';
        }
    }

    if(sortString)
    {
      queryParams["sort"] = sortString;
    }
    if(resultsPerPage){
      queryParams["resultsPerPage"] = resultsPerPage;
    }
    if(pageNumber)
    {
      queryParams["pageNumber"] = pageNumber;
    }
    log.info(JSON.stringify(queryParams))
    results = documents.query(queryParams);
    
    return results.result
}

function atLeastTwoDigits (value)
{
	return value < 10 ? "0" + value : value;
}

function formatDate(date)
{
  var formattedDate = date.getFullYear()
                    + "-" + atLeastTwoDigits(date.getMonth() + 1)
                    + "-" + atLeastTwoDigits(date.getDate())
                    + "T" + atLeastTwoDigits(date.getHours())
                    + ":" + atLeastTwoDigits(date.getMinutes())
                    + ":" + atLeastTwoDigits(date.getSeconds());
  formattedDate += date.getTimezoneOffset() < 0 ? "+" : "-";
  formattedDate += atLeastTwoDigits((Math.abs(date.getTimezoneOffset()) / 60)) + "00";
  return formattedDate
}


