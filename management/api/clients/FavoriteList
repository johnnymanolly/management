var log = require("log");
log.setLevel("INFO");
var documents = require("document");

var params = {};
if(request.body != null){
    params = request.body;
}else if(request.parameters.body){
    params = request.parameters.body;
} else {
    params = request.parameters;
}
if(typeof params == 'string' && params != null){
    try{
        params = JSON.parse(params);   
    }catch(e){
        return "INVALID OR MISSING PARAMETER";
    }
}

var columnName = params.columnName;
var resultsPerPage = params.resultsPerPage;
var pageNumber = params.pageNumber;
var sort = params.sort;
var sortType = params.sortType;
var queryFilter = params.queryFilter;
var queryType = params.queryType;
var sortingColumnName = params.sortingColumnName;
var filterColumnName = params.filterColumnName;
var action = params.action;
var subCategory = params.subCategory;
var category = params.category;
var sortingFilter = params.sortingFilter;
var publishStatus = params.publishStatus;
var return_keys = params.return_keys;

var keys = params.keys;
var key = params.key;
var action = params.action;
var login = params.login;

var results;

if(action){

    if(action == "add"){

        var fieldsToSave = {};
        fieldsToSave["key"] = toHex(login);
        fieldsToSave["login"] = login; 
        fieldsToSave["productKey"] = {"append":[key]}; 

        log.info(JSON.stringify(fieldsToSave));
        var fieldsToSaveResult = documents.save(fieldsToSave);

        if(fieldsToSaveResult.metadata.status == "failure" && fieldsToSaveResult.metadata.errorCode == "INVALID_APPEND_NEW_DOCUMENT")
        {

            var fieldsToSave = {};
            fieldsToSave["key"] = toHex(login);
            fieldsToSave["login"] = login;
            fieldsToSave["formType"] = "favorites";
            fieldsToSave["productKey"] = [key];  

            var fieldsToSaveResult = documents.save(fieldsToSave);

        }
        else if(fieldsToSaveResult.metadata.status == "failure")  
        {
            return fieldsToSaveResult.metadata;  
        }    
        else
        {
            return  {status : "success"}
        }

    }else if(action == "delete"){
        if(keys){
            if(typeof keys == 'string')
                keys = [keys]

                var fieldsToSave = {}; 
            fieldsToSave["key"] = toHex(login);
            fieldsToSave["login"] = login; 
            fieldsToSave["productKey"] = {"delete": keys}; 
            var fieldsToSaveResult = documents.save(fieldsToSave); 

            log.info("**** delete resut ****"+JSON.stringify(fieldsToSaveResult));


        } 
        return  {status : "success"}
    }
}else{
    var key = toHex(login);
    var queryParams = {};
    if(sortType == null) sortType = "string"
    var fieldsParams = "*";
    var queryString = 'apsdb.documentKey = "'+key+'"';
    var sortString = (sortingColumnName && sortingColumnName != "" && sortingColumnName != "undefined") ? sortingColumnName+"<"+sortType+":"+sort+">" : null;

    queryParams["count"] = "true";
    queryParams["query"] =  queryString;
    queryParams["fields"] =  fieldsParams;

    if(queryFilter){
        var filterQuery = (filterColumnName == null)? " and (name like \"" +queryFilter+ "%\" or number like \"" +queryFilter+ "%\" or primaryAddress like \"" +queryFilter+ "%\" or secondaryAddress like \"" +queryFilter+ "%\")" : "and ("+filterColumnName+"<"+sortType+">" + " like \"" +queryFilter+ "%\")";
        queryParams["query"] += filterQuery;
    }

    if(sortString){
        queryParams["sort"] = sortString;
    }
    if(resultsPerPage){
        queryParams["resultsPerPage"] = resultsPerPage;
    }
    if(pageNumber){
        queryParams["pageNumber"] = pageNumber;
    }
    log.info(JSON.stringify(queryParams))
    results = documents.query(queryParams);

    var docs =  results.result.documents;

    log.info("docs: " +JSON.stringify(docs))

    if(docs.length > 0)
    {

        if(docs[0]["productKey"])
        {
            var keys = docs[0]["productKey"];
        }
        else
        {
            var keys = ["fdfd"];
        }
        if(typeof keys == 'string') keys = [keys]; 
    }
    else
    {
        keys = ["dfd"];
    }

    if(return_keys)
    {
		return keys;
    }


    log.info("keys: " +JSON.stringify(queryResult))

    var itemQueryParams = {};
    var itemFieldsParams = "brand, category, description, image, key, name, price, priceOffer, unit, subCategory";

    var itemQueryString = 'formType = "item" and publish = "Published" and apsdb.documentKey in ' +JSON.stringify(keys)

    itemQueryParams["query"] =  itemQueryString;
    itemQueryParams["fields"] =  itemFieldsParams; 
    log.info(JSON.stringify(itemQueryParams))
    var queryResult = documents.query(itemQueryParams);
    log.info(JSON.stringify(queryResult))
    return queryResult.result;  

}

function toHex(input){
    try { hexcase } catch(e) { hexcase=0; }
    var hex_tab = hexcase ? "0123456789ABCDEF" : "0123456789abcdef";
    var output = "";
    var x;
    for(var i = 0; i < input.length; i++)
    {
        x = input.charCodeAt(i);
        output += hex_tab.charAt((x >>> 4) & 0x0F)
            + hex_tab.charAt( x & 0x0F);
    }
    return output;
}

