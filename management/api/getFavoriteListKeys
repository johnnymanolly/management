var log = require("log");
log.setLevel("INFO");
var documents = require("document");

var params = {};
if(request.body != null){
	params = request.body;
}else if(request.parameters.body){
	params = request.parameters.body;
} else {
  params = request.parameters;
}
if(typeof params == 'string' && params != null){
  	try{
    	params = JSON.parse(params);   
    }catch(e){
      	return "INVALID OR MISSING PARAMETER";
    }
}

var columnName = params.columnName;
var resultsPerPage = params.resultsPerPage;
var pageNumber = params.pageNumber;
var sort = params.sort;
var sortType = params.sortType;
var queryFilter = params.queryFilter;
var queryType = params.queryType;
var sortingColumnName = params.sortingColumnName;
var filterColumnName = params.filterColumnName;
var action = params.action;
var subCategory = params.subCategory;
var category = params.category;
var sortingFilter = params.sortingFilter;
var publishStatus = params.publishStatus;

var key = params.key;
var action = params.action;
var login = params.login;

var results;

if(action){
  
  if(action == "add"){
  
    var fieldsToSave = {};
    fieldsToSave["key"] = "abcde12345"; 
    fieldsToSave["login"] = login; 
    fieldsToSave["productKey"] = {"append":[key]}; 

    log.info(JSON.stringify(fieldsToSave));
   	var fieldsToSaveResult = documents.save(fieldsToSave);
    
    if(fieldsToSaveResult.metadata.status == "failure") {
      return fieldsToSaveResult.metadata;
    }else{
      return  {status : "success"}
    }
  }else if(action == "delete"){
    if(key){
       
       var fieldsToSave = {}; 
       var key = params.key;
       fieldsToSave["key"] = "abcde12345"; 
       fieldsToSave["login"] = login; 
       fieldsToSave["productKey"] = {"delete":[key]}; 

       log.info(JSON.stringify(fieldsToSave));
       var fieldsToSaveResult = documents.save(fieldsToSave);
    } 
    return  {status : "success"}
  }
}else{
  var queryParams = {};
  if(sortType == null) sortType = "string"
  var fieldsParams = "*";
  var queryString = 'apsdb.documentKey = "abcde12345"';
  var sortString = (sortingColumnName && sortingColumnName != "" && sortingColumnName != "undefined") ? sortingColumnName+"<"+sortType+":"+sort+">" : null;

  queryParams["count"] = "true";
  queryParams["query"] =  queryString;
  queryParams["fields"] =  fieldsParams;

  if(queryFilter){
    var filterQuery = (filterColumnName == null)? " and (name like \"" +queryFilter+ "%\" or number like \"" +queryFilter+ "%\" or primaryAddress like \"" +queryFilter+ "%\" or secondaryAddress like \"" +queryFilter+ "%\")" : "and ("+filterColumnName+"<"+sortType+">" + " like \"" +queryFilter+ "%\")";
    queryParams["query"] += filterQuery;
  }

  if(sortString){
    queryParams["sort"] = sortString;
  }
  if(resultsPerPage){
    queryParams["resultsPerPage"] = resultsPerPage;
  }
  if(pageNumber){
    queryParams["pageNumber"] = pageNumber;
  }
  log.info(JSON.stringify(queryParams))
  results = documents.query(queryParams);
    
  var docs =  results.result.documents;
    
    log.info("docs: " +JSON.stringify(docs))
  
  if(docs.length > 0)
  {
	 
     if(docs[0]["productKey"])
     {
		var keys = docs[0]["productKey"];
     }
      else
      {
		var keys = [];
      }
     if(typeof keys == 'string') keys = [keys]; 
  }
  else
  {
	keys = [];
  }
 
    return keys;


}

