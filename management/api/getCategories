/**
 * Gets data for the grid.
 * 
 *  @param columnName
 *  @param resultsPerPage
 *  @param pageNumber
 *  @param sort
 *  @param sortType
 *  @param queryFilter
 *  @param queryType
 *  @param sortingColumnName
 *  @param filterColumnName
 *  @param action
 * 
 * @return On success: { "status" : "success" }
 *         On failure: { "status" : "failure", "errorDetail" : "[error message]" }
 */

var log = require("log");
log.setLevel("INFO");
var documents = require("document");

/* create dummy data
for(var i = 1; i <= 100; i++){
  var fields = {};
  fields["formType"] = "car";
  fields["name"] = "name_"+i;
  fields["model"] = "model_"+i;
  fields["price"] = "price_"+i;
  documents.save(fields);
}
return
*/
var params = {};
if(request.body != null){
    params = request.body;
}else if(request.parameters.body){
    params = request.parameters.body;
} else {
    params = request.parameters;
}
if(typeof params == 'string' && params != null){
    try{
        params = JSON.parse(params);   
    }catch(e){
        return "INVALID OR MISSING PARAMETER";
    }
}

var columnName = params.columnName;
var resultsPerPage = params.resultsPerPage;
var pageNumber = params.pageNumber;
var sort = params.sort;
var sortType = params.sortType;
var queryFilter = params.queryFilter;
var queryType = params.queryType;
var sortingColumnName = params.sortingColumnName;
var filterColumnName = params.filterColumnName;
var action = params.action;
var category = params.category;
var publishStatus = params.publishStatus;

var results;

if(params.action){
    delete params.action
}

if(params.file){
    delete params.file;
}

if(action){
    var fieldsToSave = {}; 
    var row = params.row;
    for(param in row){
        fieldsToSave[param] = row[param]
    }  
    fieldsToSave["formType"] = "categories";  
    if(action == "add"){
        fieldsToSave["publish"] = "Unpublished"; 
        var fieldsToSaveResult = documents.save(fieldsToSave);
        if(fieldsToSaveResult.metadata.status == "failure") {
            return fieldsToSaveResult.metadata;
        }else{
            fieldsToSave["key"] = fieldsToSaveResult.result.document.key;
            var message = {"result": "success", "id" : "categories-grid"};
            publish("responseChannel", message);
            return  {status : "success"}
        }
    }else if(action == "edit"){
        log.info(JSON.stringify(fieldsToSave))
        fieldsToSave = params.row;
        fieldsToSave["formType"] = "categories";  
        var fieldsToSaveResult = documents.save(fieldsToSave);
        if(fieldsToSaveResult.metadata.status == "failure") {
            return fieldsToSaveResult.metadata;
        }else{
            fieldsToSave["key"] = fieldsToSave.key;
            var message = {"result": "success", "id" : "categories-grid"};
            publish("responseChannel", message);
            return  {status : "success"}
        }
    }else if(action == "delete"){
        if(params.keys){
            var keys = params.keys;
            for(var i = 0; i < keys.length; i++){
                documents.delete(keys[i]);
            }
        } 
        var message = {"result": "success", "id" : "categories-grid"};
        publish("responseChannel", message);
        return  {status : "success"}
    }
}else{
    var queryParams = {};
    if(sortType == null) sortType = "string"
    var fieldsParams = "*";
    var queryString = 'formType = "categories"';
    if(publishStatus){
        queryString += ' and publish = "' + publishStatus + '"';
    }
    if(category){
        queryString += ' and category="'+category+'"';
    }
    var sortString = (sortingColumnName && sortingColumnName != "" && sortingColumnName != "undefined") ? sortingColumnName+"<"+sortType+":"+sort+">" : null;

    queryParams["count"] = "true";
    queryParams["query"] =  queryString;
    queryParams["fields"] =  fieldsParams;

    if(queryFilter){
        var filterQuery = (filterColumnName == null)? " and (categoryName like \"" +queryFilter+ "%\" or subCategory like \"" +queryFilter+ "%\" )" : "and ("+filterColumnName+"<"+sortType+">" + " like \"" +queryFilter+ "%\")";
        queryParams["query"] += filterQuery;
    }

    if(sortString){
        queryParams["sort"] = sortString;
    }
    if(resultsPerPage){
        queryParams["resultsPerPage"] = resultsPerPage;
    }
    if(pageNumber){
        queryParams["pageNumber"] = pageNumber;
    }
    log.info(JSON.stringify(queryParams))
    results = documents.query(queryParams);

    return results.result
}

