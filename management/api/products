/**
 * Gets data for the grid.
 * 
 *  @param columnName
 *  @param resultsPerPage
 *  @param pageNumber
 *  @param sort
 *  @param sortType
 *  @param queryFilter
 *  @param queryType
 *  @param sortingColumnName
 *  @param filterColumnName
 *  @param action
 * 
 * @return On success: { "status" : "success" }
 *         On failure: { "status" : "failure", "errorDetail" : "[error message]" }
 */

var log = require("log");
log.setLevel("INFO");
var documents = require("document");


var params = {};
if(request.body != null){
    params = request.body;
}else if(request.parameters.body){
    params = request.parameters.body;
} else {
    params = request.parameters;
}
if(typeof params == 'string' && params != null){
    try{
        params = JSON.parse(params);   
    }catch(e){
        return "INVALID OR MISSING PARAMETER";
    }
}

log.info("Params: "+JSON.stringify(params))

var columnName = params.columnName;
var resultsPerPage = params.resultsPerPage;
var pageNumber = params.pageNumber;
var sort = params.sort;
var sortType = params.sortType;
var queryFilter = params.queryFilter;
var queryType = params.queryType;
var sortingColumnName = params.sortingColumnName;
var filterColumnName = params.filterColumnName;
var action = params.action;
var subCategory = params.subCategory;
var category = params.category;
var sortingFilter = params.sortingFilter;
var publishStatus = params.publishStatus;
var promotion = params.promotion;
var selected_frame = params.selected_frame;
var replace_image = params.replace_image;
var catKey = params.catKey;

var fromValue = params.fromValue;
var toValue = params.toValue;

var results;

if(action)
{
    var fieldsToSave = {};
    var row = params.row;
    if(typeof row == 'string') row = JSON.parse(row);
    for(param in row)
    {
        fieldsToSave[param] = row[param]
    }  
    fieldsToSave["formType"] = "item";  
    if(action == "set")
    {
        if(params.key)
        {
            fieldsToSave["key"] = params.key; 
        }
        
        // Delete image (named replace_image) if user is updating the an existing image
        if(replace_image && request.files)
        {
            var fields = {};
            fields["key"] = fieldsToSave["key"];
            fields["attachments.apsdb.delete"] = replace_image;
            
            var deleteResult = documents.save(fields);
            log.info("Set Action delete result : " +JSON.stringify(deleteResult))  
           
        }
        
        if(request.files && request.files["file"])
        {
            // Save image file
            var img = request.files["file"];
            var images = [];
            images.push(img[0]);

           
            var getDocument = documents.get(fieldsToSave["key"]);
            
            // In case replace_image is applicable, check if the image was the default image, if so delete image field and set new image as default
            if(replace_image && getDocument.result.image && replace_image == getDocument.result.image)
            {
                fieldsToSave["image"] = images[0]['fileName'];
            }
            
            // Get already saved images. (find if we can append images to exsisting ones)
            if(getDocument.result && getDocument.result.attachments)
            {
                var filenames = getDocument.result.attachments;
                if(typeof filenames == 'string') filenames = [filenames];
                
                // Apply cases:
                
                // Max allowed images is 4
                if(filenames.length == 4) return;            
                
                for(var i = 0; i < filenames.length; i++)
                {
                    var result = documents.getAttachment(fieldsToSave["key"], filenames[i], {"fieldName": "attachments", "versionNumber": "1"});          
                    images.push(result);
                }
            }
            else
            {
                // If first image set as default
                fieldsToSave["image"] = img[0]["fileName"];
                
            }
		
            fieldsToSave["attachments"] = images; 

        }


        fieldsToSave["meta.types"] = {
            "price": "numeric",
            "priceOffer": "numeric"
        } 
        
     

        log.info("Set Action Fields Params : " +JSON.stringify(fieldsToSave))  
        var fieldsToSaveResult = documents.save(fieldsToSave);
        log.info("Set Action Save Fields Result : " +JSON.stringify(fieldsToSaveResult))  
        if(fieldsToSaveResult.metadata.status == "failure") 
        {
            return fieldsToSaveResult.metadata;
        }
        else
        {
            var resp = {status : "success", key: fieldsToSaveResult.result.document.key, selected_frame: selected_frame};
            if(images) resp["fileName"] = images[0]['fileName'];
            return  resp
        }
    }
    else if(action == "delete")
    {
        if(params.keys)
        {
            var keys = params.keys;
            for(var i = 0; i < keys.length; i++)
            {
                documents.delete(keys[i]);
            }
            return  {status : "success"}
        } 
        else if(params.attachment)
        {
            var fields = {};
            fields["key"] = params.key;
            fields["attachments.apsdb.delete"] = params.attachment;

            log.info("Delete image attachment result : " +JSON.stringify(fields))  
            var fieldsToSaveResult = documents.save(fields);
            if(fieldsToSaveResult.metadata.status == "failure")
            {
                return fieldsToSaveResult.metadata;
            }
            else
            {
                // check if this image was the default, if so delte image field
                var getDocument = documents.get(params.key);
                if(getDocument.result && getDocument.result.image && getDocument.result.image == params.attachment)
                {
                	var fields = {};
                    fields["key"] = params.key;
                    fields["image"] = "";

                    log.info("Delete default image name field result : " +JSON.stringify(fields))  
                    var fieldsToSaveResult = documents.save(fields);
                    if(fieldsToSaveResult.metadata.status == "failure")
                    {
                        return fieldsToSaveResult.metadata;
                    }
                    
                    // Check got other images to set one as default
                    if(getDocument.result && getDocument.result.attachments)
                    {
                        var filenames = getDocument.result.attachments;
                        if(typeof filenames == 'string') filenames = [filenames];
                        
                        var fields = {};
                        fields["key"] = params.key;
                        fields["image"] = filenames[0];

                        log.info("Delete default image name field result : " +JSON.stringify(fields))  
                        var fieldsToSaveResult = documents.save(fields);
                        if(fieldsToSaveResult.metadata.status == "failure")
                        {
                            return fieldsToSaveResult.metadata;
                        }
                        
                    }
                        
                        
                }
                return  {status : "success", selected_frame: selected_frame}
            }

        }

    }
}
else
{
    var queryParams = {};
    if(sortType == null) sortType = "string"
    //attachments, brand, category, description, extra_ingredients, default_ingredients, image, key, name, price, priceOffer, unit, subCategory, publish, promotion
    var fieldsParams = "*";
    var queryString = 'formType = "item"';
    if(publishStatus){
        queryString += ' and publish = "' + publishStatus + '"';
    }
    if(subCategory){
        if(typeof subCategory == "string"){
            queryString += ' and subCategory="'+subCategory+'"';
        }else{
            for(var i = 0; i < subCategory.length; i++){
                if(i == 0){
                    queryString += ' and ( subCategory="'+subCategory[i]+'"';
                }else{
                    queryString += ' or subCategory="'+subCategory[i]+'"';
                }        
            }
            queryString += ' )';
        }
    }
    if(catKey){
        queryString += ' and catKey="'+catKey+'"';
    }
    if(promotion){
        queryString += ' and promotion= "true"';
    }
    var sortString = (sortingColumnName && sortingColumnName != "" && sortingColumnName != "undefined") ? sortingColumnName+"<"+sortType+":"+sort+">" : null;
    if(sortingFilter){
        sortString = sortingFilter;
    }

    queryParams["count"] = "true";
    queryParams["query"] =  queryString;
    queryParams["fields"] =  fieldsParams;

    if(queryFilter){
        var filterQuery = (filterColumnName == null)? " and (name like \"" +queryFilter+ "%\" or name like \"" +queryFilter.toLocaleLowerCase()+ "%\" or name like \"" +capitalizeFirstLetter(queryFilter) + "%\" or category like \"" +queryFilter+ "%\" or price like \"" +queryFilter+ "%\" or image like \"" +queryFilter+ "%\")" : "and ("+filterColumnName+"<"+sortType+">" + " like \"" +queryFilter+ "%\")";
        queryParams["query"] += filterQuery;
    }

    if(fromValue){
        queryParams["query"] += " and price<numeric> > " +fromValue;
    }

    if(toValue){
        queryParams["query"] += " and price<numeric> < " +toValue;
    }

    if(sortString){
        queryParams["sort"] = sortString;
    }

    if(resultsPerPage){
        queryParams["resultsPerPage"] = resultsPerPage;
    }

    if(pageNumber){
        queryParams["pageNumber"] = pageNumber;
    }

    log.info(JSON.stringify(queryParams))
    results = documents.query(queryParams);
    
    var discount = getDiscountValue();
    
    if(discount)
    {
        var ratio = parseInt(discount) / 100;
		for(var i = 0; i < results.result.documents.length; i++)
        {
            var after_discount_price = parseFloat(results.result.documents[i]["price"]) - ( parseFloat(results.result.documents[i]["price"]) * ratio);
            results.result.documents[i]["discount"] = Math.round(after_discount_price * 100) / 100;
			
        }
    }
    
    return results.result

    
}

function capitalizeFirstLetter(string) {
    return string.charAt(0).toUpperCase() + string.slice(1);
}

function getDiscountValue(subCat)
{
    queryParams = {};
    var key = toHex("settings");
    queryParams["query"] = 'formType = "settings" and key = "' + key + '"';
    queryParams["fields"] =  "*";
    var results = documents.query(queryParams);

    if(results.result.documents)
    {
        if(results.result.documents[0].discountEnabled == "true")
        {
            return results.result.documents[0].discount;
        }
		
    }

}

function getGalleryName(subCat)
{
    queryParams = {};
    queryParams["query"] = 'formType = "categories" and subCategory = "' + subCat + '"';
    queryParams["fields"] =  "category";
    var results = documents.query(queryParams);

    return results
}

function toHex(input){
    try { hexcase } catch(e) { hexcase=0; }
    var hex_tab = hexcase ? "0123456789ABCDEF" : "0123456789abcdef";
    var output = "";
    var x;
    for(var i = 0; i < input.length; i++)
    {
        x = input.charCodeAt(i);
        output += hex_tab.charAt((x >>> 4) & 0x0F)
            + hex_tab.charAt( x & 0x0F);
    }
    return output;
}